//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/GameControlsAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Scripts.Player.Inputs
{
    public partial class @GameControlsAsset: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameControlsAsset()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControlsAsset"",
    ""maps"": [
        {
            ""name"": ""CameraMap"",
            ""id"": ""a0dc03a0-e96a-41de-93d3-4207db7d052d"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b443bd63-5a87-42d1-b813-f17a1de255d2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""876f804d-2c05-462f-ba0b-38355d8d547b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56f131a1-7276-4146-adec-7d507b2be6f5"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""DeltaTime,ScaleVector2(x=3000,y=3000)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MovementMap"",
            ""id"": ""f2c0fd46-e128-4d29-b79e-86c742ffa048"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c863b89c-4546-4ddf-8983-4688f7b3afdd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c2852d39-11f0-4305-a322-e0372b48d2b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""8f2b256c-1b96-43fc-bd75-a07c7d76d424"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""818c783b-680a-4496-8366-5d1e4a7058a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Button"",
                    ""id"": ""f89ef67c-e8a3-4e8b-b39b-a5f77a46d22b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a11dcf64-03e8-4b27-83a2-a66c4c9d14f0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a9913ca6-10e7-45b6-a6dc-f268caedabb3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c7ab9f72-32ae-4efd-a430-e2fd405e9472"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c1d51807-92eb-4558-bb76-5962212550fb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a50fdc25-5807-4b05-9c41-5fa1cc62e6d9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2d09c5e4-28d3-4fbc-b0e3-84960f11dbd1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47772146-8735-48c9-8d65-1f3b19fed4eb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7afad844-0a4f-4e05-9b26-3470065e655e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab0a870d-53af-4b0f-9e7a-6c4f22f1511e"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3c4e346-dd95-44da-9530-8b9ec4c00623"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13b66186-bc73-4391-8798-2ba3cf6438cb"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ae09671-a360-40d2-8744-2073f849024c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc52bc08-7bf6-4526-acf5-174d2fc8eb68"",
                    ""path"": ""<Keyboard>/capsLock"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59188e91-adef-44ce-bed9-195d7adff6ac"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AbilitiesMap"",
            ""id"": ""f2611154-399e-4351-99d6-3feb379b9b12"",
            ""actions"": [
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""95caf3e0-119d-4154-b9e9-1b3c78597406"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""bd019f92-0d7d-4e24-b376-4df943a47c68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponAttack"",
                    ""type"": ""Button"",
                    ""id"": ""6048f64e-2b24-4f98-9211-914eebeb4c8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45bb819c-3830-46e3-b3fb-60c11ef6aa8c"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4c2ac91-843f-4534-a885-599e4dbc0948"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9051be3c-8ca1-49e6-ae7e-1822a9eab45f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d3bf265-c291-48c1-b2e5-df8d8cc80977"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""WeaponAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2dd30fa-f8c0-409a-9782-bbec002c5aae"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""WeaponAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UtilityMap"",
            ""id"": ""a02b093d-934a-4754-bfca-99cd0ac8942d"",
            ""actions"": [
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""24681a29-5487-43c0-8779-8869f1367730"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""30ffcaee-e2d8-4f99-a0ed-946c74a5336d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Discard"",
                    ""type"": ""Button"",
                    ""id"": ""01256a9a-44e3-45d8-a182-405d56b9ae24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0f9bb9e6-9345-4ca3-874a-5d66b3200375"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fad0e91c-5d7c-457e-b182-991bedc3308e"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a27f58e0-3f86-4c7f-9301-3120f7cc33dc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57e698b9-e992-4f5b-9497-8c6d832c6eaa"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ff21e0b-9882-43a6-aceb-9b82bfa865ea"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Discard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7305a1fc-d448-4b3e-9302-71615991eaac"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Discard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // CameraMap
            m_CameraMap = asset.FindActionMap("CameraMap", throwIfNotFound: true);
            m_CameraMap_Look = m_CameraMap.FindAction("Look", throwIfNotFound: true);
            // MovementMap
            m_MovementMap = asset.FindActionMap("MovementMap", throwIfNotFound: true);
            m_MovementMap_Move = m_MovementMap.FindAction("Move", throwIfNotFound: true);
            m_MovementMap_Jump = m_MovementMap.FindAction("Jump", throwIfNotFound: true);
            m_MovementMap_Crouch = m_MovementMap.FindAction("Crouch", throwIfNotFound: true);
            m_MovementMap_Sprint = m_MovementMap.FindAction("Sprint", throwIfNotFound: true);
            m_MovementMap_Walk = m_MovementMap.FindAction("Walk", throwIfNotFound: true);
            // AbilitiesMap
            m_AbilitiesMap = asset.FindActionMap("AbilitiesMap", throwIfNotFound: true);
            m_AbilitiesMap_Test = m_AbilitiesMap.FindAction("Test", throwIfNotFound: true);
            m_AbilitiesMap_Interact = m_AbilitiesMap.FindAction("Interact", throwIfNotFound: true);
            m_AbilitiesMap_WeaponAttack = m_AbilitiesMap.FindAction("WeaponAttack", throwIfNotFound: true);
            // UtilityMap
            m_UtilityMap = asset.FindActionMap("UtilityMap", throwIfNotFound: true);
            m_UtilityMap_OpenInventory = m_UtilityMap.FindAction("OpenInventory", throwIfNotFound: true);
            m_UtilityMap_PauseMenu = m_UtilityMap.FindAction("PauseMenu", throwIfNotFound: true);
            m_UtilityMap_Discard = m_UtilityMap.FindAction("Discard", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CameraMap
        private readonly InputActionMap m_CameraMap;
        private List<ICameraMapActions> m_CameraMapActionsCallbackInterfaces = new List<ICameraMapActions>();
        private readonly InputAction m_CameraMap_Look;
        public struct CameraMapActions
        {
            private @GameControlsAsset m_Wrapper;
            public CameraMapActions(@GameControlsAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @Look => m_Wrapper.m_CameraMap_Look;
            public InputActionMap Get() { return m_Wrapper.m_CameraMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraMapActions set) { return set.Get(); }
            public void AddCallbacks(ICameraMapActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraMapActionsCallbackInterfaces.Add(instance);
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }

            private void UnregisterCallbacks(ICameraMapActions instance)
            {
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
            }

            public void RemoveCallbacks(ICameraMapActions instance)
            {
                if (m_Wrapper.m_CameraMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraMapActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraMapActions @CameraMap => new CameraMapActions(this);

        // MovementMap
        private readonly InputActionMap m_MovementMap;
        private List<IMovementMapActions> m_MovementMapActionsCallbackInterfaces = new List<IMovementMapActions>();
        private readonly InputAction m_MovementMap_Move;
        private readonly InputAction m_MovementMap_Jump;
        private readonly InputAction m_MovementMap_Crouch;
        private readonly InputAction m_MovementMap_Sprint;
        private readonly InputAction m_MovementMap_Walk;
        public struct MovementMapActions
        {
            private @GameControlsAsset m_Wrapper;
            public MovementMapActions(@GameControlsAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_MovementMap_Move;
            public InputAction @Jump => m_Wrapper.m_MovementMap_Jump;
            public InputAction @Crouch => m_Wrapper.m_MovementMap_Crouch;
            public InputAction @Sprint => m_Wrapper.m_MovementMap_Sprint;
            public InputAction @Walk => m_Wrapper.m_MovementMap_Walk;
            public InputActionMap Get() { return m_Wrapper.m_MovementMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementMapActions set) { return set.Get(); }
            public void AddCallbacks(IMovementMapActions instance)
            {
                if (instance == null || m_Wrapper.m_MovementMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MovementMapActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
            }

            private void UnregisterCallbacks(IMovementMapActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
                @Walk.started -= instance.OnWalk;
                @Walk.performed -= instance.OnWalk;
                @Walk.canceled -= instance.OnWalk;
            }

            public void RemoveCallbacks(IMovementMapActions instance)
            {
                if (m_Wrapper.m_MovementMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMovementMapActions instance)
            {
                foreach (var item in m_Wrapper.m_MovementMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MovementMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MovementMapActions @MovementMap => new MovementMapActions(this);

        // AbilitiesMap
        private readonly InputActionMap m_AbilitiesMap;
        private List<IAbilitiesMapActions> m_AbilitiesMapActionsCallbackInterfaces = new List<IAbilitiesMapActions>();
        private readonly InputAction m_AbilitiesMap_Test;
        private readonly InputAction m_AbilitiesMap_Interact;
        private readonly InputAction m_AbilitiesMap_WeaponAttack;
        public struct AbilitiesMapActions
        {
            private @GameControlsAsset m_Wrapper;
            public AbilitiesMapActions(@GameControlsAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @Test => m_Wrapper.m_AbilitiesMap_Test;
            public InputAction @Interact => m_Wrapper.m_AbilitiesMap_Interact;
            public InputAction @WeaponAttack => m_Wrapper.m_AbilitiesMap_WeaponAttack;
            public InputActionMap Get() { return m_Wrapper.m_AbilitiesMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(AbilitiesMapActions set) { return set.Get(); }
            public void AddCallbacks(IAbilitiesMapActions instance)
            {
                if (instance == null || m_Wrapper.m_AbilitiesMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_AbilitiesMapActionsCallbackInterfaces.Add(instance);
                @Test.started += instance.OnTest;
                @Test.performed += instance.OnTest;
                @Test.canceled += instance.OnTest;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @WeaponAttack.started += instance.OnWeaponAttack;
                @WeaponAttack.performed += instance.OnWeaponAttack;
                @WeaponAttack.canceled += instance.OnWeaponAttack;
            }

            private void UnregisterCallbacks(IAbilitiesMapActions instance)
            {
                @Test.started -= instance.OnTest;
                @Test.performed -= instance.OnTest;
                @Test.canceled -= instance.OnTest;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @WeaponAttack.started -= instance.OnWeaponAttack;
                @WeaponAttack.performed -= instance.OnWeaponAttack;
                @WeaponAttack.canceled -= instance.OnWeaponAttack;
            }

            public void RemoveCallbacks(IAbilitiesMapActions instance)
            {
                if (m_Wrapper.m_AbilitiesMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IAbilitiesMapActions instance)
            {
                foreach (var item in m_Wrapper.m_AbilitiesMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_AbilitiesMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public AbilitiesMapActions @AbilitiesMap => new AbilitiesMapActions(this);

        // UtilityMap
        private readonly InputActionMap m_UtilityMap;
        private List<IUtilityMapActions> m_UtilityMapActionsCallbackInterfaces = new List<IUtilityMapActions>();
        private readonly InputAction m_UtilityMap_OpenInventory;
        private readonly InputAction m_UtilityMap_PauseMenu;
        private readonly InputAction m_UtilityMap_Discard;
        public struct UtilityMapActions
        {
            private @GameControlsAsset m_Wrapper;
            public UtilityMapActions(@GameControlsAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @OpenInventory => m_Wrapper.m_UtilityMap_OpenInventory;
            public InputAction @PauseMenu => m_Wrapper.m_UtilityMap_PauseMenu;
            public InputAction @Discard => m_Wrapper.m_UtilityMap_Discard;
            public InputActionMap Get() { return m_Wrapper.m_UtilityMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UtilityMapActions set) { return set.Get(); }
            public void AddCallbacks(IUtilityMapActions instance)
            {
                if (instance == null || m_Wrapper.m_UtilityMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UtilityMapActionsCallbackInterfaces.Add(instance);
                @OpenInventory.started += instance.OnOpenInventory;
                @OpenInventory.performed += instance.OnOpenInventory;
                @OpenInventory.canceled += instance.OnOpenInventory;
                @PauseMenu.started += instance.OnPauseMenu;
                @PauseMenu.performed += instance.OnPauseMenu;
                @PauseMenu.canceled += instance.OnPauseMenu;
                @Discard.started += instance.OnDiscard;
                @Discard.performed += instance.OnDiscard;
                @Discard.canceled += instance.OnDiscard;
            }

            private void UnregisterCallbacks(IUtilityMapActions instance)
            {
                @OpenInventory.started -= instance.OnOpenInventory;
                @OpenInventory.performed -= instance.OnOpenInventory;
                @OpenInventory.canceled -= instance.OnOpenInventory;
                @PauseMenu.started -= instance.OnPauseMenu;
                @PauseMenu.performed -= instance.OnPauseMenu;
                @PauseMenu.canceled -= instance.OnPauseMenu;
                @Discard.started -= instance.OnDiscard;
                @Discard.performed -= instance.OnDiscard;
                @Discard.canceled -= instance.OnDiscard;
            }

            public void RemoveCallbacks(IUtilityMapActions instance)
            {
                if (m_Wrapper.m_UtilityMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUtilityMapActions instance)
            {
                foreach (var item in m_Wrapper.m_UtilityMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UtilityMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UtilityMapActions @UtilityMap => new UtilityMapActions(this);
        private int m_PCSchemeIndex = -1;
        public InputControlScheme PCScheme
        {
            get
            {
                if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
                return asset.controlSchemes[m_PCSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface ICameraMapActions
        {
            void OnLook(InputAction.CallbackContext context);
        }
        public interface IMovementMapActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
            void OnWalk(InputAction.CallbackContext context);
        }
        public interface IAbilitiesMapActions
        {
            void OnTest(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnWeaponAttack(InputAction.CallbackContext context);
        }
        public interface IUtilityMapActions
        {
            void OnOpenInventory(InputAction.CallbackContext context);
            void OnPauseMenu(InputAction.CallbackContext context);
            void OnDiscard(InputAction.CallbackContext context);
        }
    }
}
